{
  "filename": "packages/react-ui/src/Modal/Modal.tsx",
  "tags": {},
  "filePath": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/packages/react-ui/src/Modal/Modal.tsx",
  "description": "",
  "displayName": "Modal",
  "props": {
    "backgroundColor": {
      "defaultValue": null,
      "description": "Choose Main background Color",
      "name": "backgroundColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"danger\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"cloud dark\""
          }
        ]
      }
    },
    "display": {
      "defaultValue": null,
      "description": "Set element display",
      "name": "display",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ResponsiveProps<ElementDisplay>"
      }
    },
    "fontWeight": {
      "defaultValue": null,
      "description": "Define the main Font Weight",
      "name": "fontWeight",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "FontWeight",
        "value": [
          {
            "value": "\"light\""
          },
          {
            "value": "\"regular\""
          },
          {
            "value": "\"semi bold\""
          },
          {
            "value": "\"bold\""
          }
        ]
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Change component size\nSet modal Size",
      "name": "size",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        },
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"big\" | \"small\" | \"large\" | \"huge\"",
        "value": [
          {
            "value": "\"big\""
          },
          {
            "value": "\"small\""
          },
          {
            "value": "\"large\""
          },
          {
            "value": "\"huge\""
          }
        ]
      }
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Define Text Align",
      "name": "textAlign",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "ContentAlign",
        "value": [
          {
            "value": "\"left\""
          },
          {
            "value": "\"center\""
          },
          {
            "value": "\"right\""
          }
        ]
      }
    },
    "textColor": {
      "defaultValue": null,
      "description": "Choose main text color",
      "name": "textColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"danger\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"cloud dark\""
          }
        ]
      }
    },
    "actions": {
      "defaultValue": null,
      "description": "Modal Actions Shorthand",
      "name": "actions",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandCollection<ButtonProps>"
      }
    },
    "basic": {
      "defaultValue": null,
      "description": "Remove all Modal style",
      "name": "basic",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Children could be component, that receive close modal function",
      "name": "children",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        },
        {
          "fileName": "appbuckets/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "(ShorthandContent | ((tools: { closeModal: (e: MouseEvent<HTMLElement, MouseEvent>) => void; }) => void)) & ReactNode"
      }
    },
    "closeIcon": {
      "defaultValue": null,
      "description": "Set close icon",
      "name": "closeIcon",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "false | AppBucketsIcon<IconProps>"
      }
    },
    "closeOnEscape": {
      "defaultValue": null,
      "description": "Close modal using escape",
      "name": "closeOnEscape",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "closeOnBackdropClick": {
      "defaultValue": null,
      "description": "Close modal on Backdrop Click",
      "name": "closeOnBackdropClick",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "content": {
      "defaultValue": null,
      "description": "Modal Content Shorthand",
      "name": "content",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandItem<ModalContentProps>"
      }
    },
    "defaultOpen": {
      "defaultValue": null,
      "description": "Set initial open prop and let it to be auto controlled",
      "name": "defaultOpen",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "header": {
      "defaultValue": null,
      "description": "Modal Header Shorthand",
      "name": "header",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandItem<ModalHeaderProps>"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "A modal Top Icon to show",
      "name": "icon",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AppBucketsIcon<IconProps>"
      }
    },
    "loading": {
      "defaultValue": null,
      "description": "Enable loading state for Backdrop",
      "name": "loading",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loaderProps": {
      "defaultValue": null,
      "description": "Set loader props of Backdrop Component",
      "name": "loaderProps",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "LoaderProps"
      }
    },
    "mountNode": {
      "defaultValue": null,
      "description": "Set modal Mount Node",
      "name": "mountNode",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "HTMLElement"
      }
    },
    "onActionClick": {
      "defaultValue": null,
      "description": "When using Actions Shorthand, a global callback could be applied",
      "name": "onActionClick",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: MouseEvent<HTMLElement, MouseEvent>, props: ButtonProps) => void"
      }
    },
    "onClose": {
      "defaultValue": null,
      "description": "On Modal Close callback",
      "name": "onClose",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: MouseEvent<HTMLElement, MouseEvent>, props: ModalProps) => void"
      }
    },
    "onOpen": {
      "defaultValue": null,
      "description": "On Modal Open callback",
      "name": "onOpen",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: MouseEvent<HTMLElement, MouseEvent>, props: ModalProps) => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Control if Modal is Open or Not",
      "name": "open",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "openOnTriggerClick": {
      "defaultValue": null,
      "description": "Open modal on Trigger click",
      "name": "openOnTriggerClick",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "openOnTriggerFocus": {
      "defaultValue": null,
      "description": "Open modal on Trigger focus",
      "name": "openOnTriggerFocus",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "openOnTriggerMouseEnter": {
      "defaultValue": null,
      "description": "Open modal on Trigger mouse enter",
      "name": "openOnTriggerMouseEnter",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "timeout": {
      "defaultValue": null,
      "description": "Set transition timeout",
      "name": "timeout",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "TransitionModeDependantType<number>"
      }
    },
    "trigger": {
      "defaultValue": null,
      "description": "The element to be rendered in-place where the portal is defined",
      "name": "trigger",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<any, string | JSXElementConstructor<any>>"
      }
    },
    "triggerRef": {
      "defaultValue": null,
      "description": "Called with a ref to the trigger node",
      "name": "triggerRef",
      "parent": {
        "fileName": "react-ui/src/Modal/Modal.types.ts",
        "name": "StrictModalProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Modal/Modal.types.ts",
          "name": "StrictModalProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Ref<HTMLElement>"
      }
    },
    "className": {
      "defaultValue": null,
      "description": "User Defined Class Names",
      "name": "className",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreUIVoidComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreUIVoidComponentProps"
        },
        {
          "fileName": "appbuckets/node_modules/@types/react/index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "as": {
      "defaultValue": null,
      "description": "",
      "name": "as",
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ElementType<any>"
      }
    }
  }
}