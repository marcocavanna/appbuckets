{
  "filename": "packages/react-ui/src/VirtualizedTable/VirtualizedTable.tsx",
  "tags": {},
  "description": "",
  "displayName": "VirtualizedTable",
  "props": {
    "compressed": {
      "defaultValue": null,
      "description": "Compress Spacing between cells and rows",
      "name": "compressed",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "filterRowHeight": {
      "defaultValue": null,
      "description": "Filter row height",
      "name": "filterRowHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "footerRowHeight": {
      "defaultValue": null,
      "description": "Footer row height",
      "name": "footerRowHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "headerHeight": {
      "defaultValue": null,
      "description": "Table header height",
      "name": "headerHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "height": {
      "defaultValue": null,
      "description": "Table Height",
      "name": "height",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "maximumHeight": {
      "defaultValue": null,
      "description": "Set the maximum height",
      "name": "maximumHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "minimumHeight": {
      "defaultValue": null,
      "description": "Set the minimum height",
      "name": "minimumHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "rowHeight": {
      "defaultValue": null,
      "description": "Row height, a fixed number or a get function, received the index",
      "name": "rowHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": true,
      "type": {
        "name": "number | ((index: number) => number)"
      }
    },
    "scrollOnTopButtonProps": {
      "defaultValue": null,
      "description": "Extra props used for ScrollOnTob Button",
      "name": "scrollOnTopButtonProps",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<ButtonProps>"
      }
    },
    "scrollOnTopOffsetVisibility": {
      "defaultValue": null,
      "description": "Set the scroll offset after that ScrollOnTop component will be visible, default is 2 x TableBodyHeight",
      "name": "scrollOnTopOffsetVisibility",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "subtractToHeight": {
      "defaultValue": null,
      "description": "Set if must subtract some pixel from height",
      "name": "subtractToHeight",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "useScrollOnTop": {
      "defaultValue": null,
      "description": "Use the ScrollOnTop Button",
      "name": "useScrollOnTop",
      "parent": {
        "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
        "name": "StrictVirtualizedTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/VirtualizedTable/VirtualizedTable.types.ts",
          "name": "StrictVirtualizedTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "as": {
      "defaultValue": null,
      "description": "An Element used to Render the Component",
      "name": "as",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ComponentClass<{}, any> | FunctionComponent<{}>"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Children ar not permitted",
      "name": "children",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        },
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "never"
      }
    },
    "Components": {
      "defaultValue": null,
      "description": "Components used to render the Table",
      "name": "Components",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<RxTableComponents<Data>>"
      }
    },
    "disableHeader": {
      "defaultValue": null,
      "description": "Disable Header Render",
      "name": "disableHeader",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "getRowKey": {
      "defaultValue": null,
      "description": "The row key or a function to get it",
      "name": "getRowKey",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": true,
      "type": {
        "name": "string | number | symbol | ((row: Data, index: number, array: Data[]) => Key)"
      }
    },
    "initiallyLoading": {
      "defaultValue": null,
      "description": "Initial Loading State",
      "name": "initiallyLoading",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "loaderProps": {
      "defaultValue": null,
      "description": "Set default loader props, used with default loader component",
      "name": "loaderProps",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<LoaderProps>"
      }
    },
    "maximumWidth": {
      "defaultValue": null,
      "description": "Set the maximum width",
      "name": "maximumWidth",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "minimumWidth": {
      "defaultValue": null,
      "description": "Set the minimum width",
      "name": "minimumWidth",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "noDataEmptyContentProps": {
      "defaultValue": null,
      "description": "Set default empty content props, used with default empty component",
      "name": "noDataEmptyContentProps",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "EmptyContentProps"
      }
    },
    "noFilteredDataEmptyContentProps": {
      "defaultValue": null,
      "description": "Set default empty content props, used with default empty component",
      "name": "noFilteredDataEmptyContentProps",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "EmptyContentProps"
      }
    },
    "onRowClick": {
      "defaultValue": null,
      "description": "On Row Click Handler",
      "name": "onRowClick",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(row: Data, index: number, array: Data[]) => void"
      }
    },
    "selectColumnProps": {
      "defaultValue": null,
      "description": "Select Column Props",
      "name": "selectColumnProps",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<Pick<RxTableColumnProps<Data>, \"className\" | \"headerClassName\" | \"key\" | \"textAlign\">>"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "Wrapper Style",
      "name": "style",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "CSSProperties"
      }
    },
    "subtractToWidth": {
      "defaultValue": null,
      "description": "Set if must subtract some pixel from width",
      "name": "subtractToWidth",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "width": {
      "defaultValue": null,
      "description": "Table Width",
      "name": "width",
      "parent": {
        "fileName": "react-ui/src/RxTable/RxTable.types.ts",
        "name": "StrictRxTableProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.types.ts",
          "name": "StrictRxTableProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "columns": {
      "defaultValue": null,
      "description": "Columns Array",
      "name": "columns",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useColumns.ts",
        "name": "UseColumnsConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useColumns.ts",
          "name": "UseColumnsConfig"
        },
        {
          "fileName": "react-ui/src/RxTable/lib/useDataFiltering.ts",
          "name": "UseDataFiltering"
        }
      ],
      "required": true,
      "type": {
        "name": "RxTableColumnProps<Data>[]"
      }
    },
    "selectable": {
      "defaultValue": null,
      "description": "Set if data will be selectable\nSet if selector is disabled",
      "name": "selectable",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useColumns.ts",
        "name": "UseColumnsConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useColumns.ts",
          "name": "UseColumnsConfig"
        },
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSelector.ts",
          "name": "UseDataSelectorConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "filterLogic": {
      "defaultValue": null,
      "description": "The filter logic to apply",
      "name": "filterLogic",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataFiltering.ts",
        "name": "UseDataFiltering"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataFiltering.ts",
          "name": "UseDataFiltering"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"and\" | \"or\"",
        "value": [
          {
            "value": "\"and\""
          },
          {
            "value": "\"or\""
          }
        ]
      }
    },
    "data": {
      "defaultValue": null,
      "description": "Data to load",
      "name": "data",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
        "name": "UseDataLoadConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
          "name": "UseDataLoadConfig"
        }
      ],
      "required": true,
      "type": {
        "name": "Data[] | ((timestamp: number) => Data[] | Promise<Data[]>)"
      }
    },
    "defaultData": {
      "defaultValue": null,
      "description": "Default data to use on init",
      "name": "defaultData",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
        "name": "UseDataLoadConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
          "name": "UseDataLoadConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "Data[]"
      }
    },
    "defaultLoading": {
      "defaultValue": null,
      "description": "Default loading state",
      "name": "defaultLoading",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
        "name": "UseDataLoadConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
          "name": "UseDataLoadConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "reloadDependency": {
      "defaultValue": null,
      "description": "Dependency to use to reload data",
      "name": "reloadDependency",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
        "name": "UseDataLoadConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
          "name": "UseDataLoadConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "reloadSilently": {
      "defaultValue": null,
      "description": "Reload data silently",
      "name": "reloadSilently",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
        "name": "UseDataLoadConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataLoad.ts",
          "name": "UseDataLoadConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultSelectedData": {
      "defaultValue": null,
      "description": "A default selected data",
      "name": "defaultSelectedData",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSelector.ts",
        "name": "UseDataSelectorConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSelector.ts",
          "name": "UseDataSelectorConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "Data[]"
      }
    },
    "onSelectedDataChange": {
      "defaultValue": null,
      "description": "An handler to call when selected data change",
      "name": "onSelectedDataChange",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSelector.ts",
        "name": "UseDataSelectorConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSelector.ts",
          "name": "UseDataSelectorConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "(selected: Data[]) => void"
      }
    },
    "defaultReverseSorting": {
      "defaultValue": null,
      "description": "Set initial reverse sorting",
      "name": "defaultReverseSorting",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
        "name": "UseDataSortingConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
          "name": "UseDataSortingConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultSort": {
      "defaultValue": null,
      "description": "Set initial sort",
      "name": "defaultSort",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
        "name": "UseDataSortingConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
          "name": "UseDataSortingConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "onSortChange": {
      "defaultValue": null,
      "description": "Callback handler fired when sort is changing",
      "name": "onSortChange",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
        "name": "UseDataSortingConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
          "name": "UseDataSortingConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "(sorting: string[], reverse: boolean) => void"
      }
    },
    "reverseSorting": {
      "defaultValue": null,
      "description": "Manual control reverse sorting",
      "name": "reverseSorting",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
        "name": "UseDataSortingConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
          "name": "UseDataSortingConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "sort": {
      "defaultValue": null,
      "description": "Manual control sorting",
      "name": "sort",
      "parent": {
        "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
        "name": "UseDataSortingConfig"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/lib/useDataSorting.ts",
          "name": "UseDataSortingConfig"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "isVirtualized": {
      "defaultValue": null,
      "description": "",
      "name": "isVirtualized",
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.factory.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "classes": {
      "defaultValue": null,
      "description": "",
      "name": "classes",
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.factory.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<Record<keyof RxTableComponents<any> | \"FilterCell\" | \"FilterRow\", string>>"
      }
    },
    "styles": {
      "defaultValue": null,
      "description": "",
      "name": "styles",
      "declarations": [
        {
          "fileName": "react-ui/src/RxTable/RxTable.factory.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<Record<keyof RxTableComponents<any> | \"FilterCell\" | \"FilterRow\", CSSProperties>>"
      }
    }
  }
}