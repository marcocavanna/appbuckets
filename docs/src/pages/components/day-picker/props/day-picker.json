{
  "filename": "packages/react-ui/src/DayPicker/DayPicker.tsx",
  "tags": {},
  "description": "",
  "displayName": "DayPicker",
  "props": {
    "clearable": {
      "defaultValue": null,
      "description": "Set field as Clearable, this option will be passed down to input element",
      "name": "clearable",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "clearButton": {
      "defaultValue": null,
      "description": "Set clear button Content, this option will be used to build the clear button in modal view",
      "name": "clearButton",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandItem<ButtonProps>"
      }
    },
    "closeOnDayPicked": {
      "defaultValue": null,
      "description": "Close the DayPicker once a day has been selected",
      "name": "closeOnDayPicked",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "date": {
      "defaultValue": null,
      "description": "Set the date",
      "name": "date",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "defaultDate": {
      "defaultValue": null,
      "description": "Set the default date",
      "name": "defaultDate",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ParsableDate"
      }
    },
    "defaultOpen": {
      "defaultValue": null,
      "description": "Set the default open state",
      "name": "defaultOpen",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Disable the Day Picker",
      "name": "disabled",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "format": {
      "defaultValue": null,
      "description": "Custom format function to show date",
      "name": "format",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(date: Date) => string"
      }
    },
    "onCalendarClose": {
      "defaultValue": null,
      "description": "On calendar close event handler",
      "name": "onCalendarClose",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(nothing: null, props: DayPickerProps<ParsableDate>) => void"
      }
    },
    "onCalendarOpen": {
      "defaultValue": null,
      "description": "On calendar open event handler",
      "name": "onCalendarOpen",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(nothing: null, props: DayPickerProps<ParsableDate>) => void"
      }
    },
    "onDayChange": {
      "defaultValue": null,
      "description": "On day change event handler",
      "name": "onDayChange",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(nothing: null, props: DayPickerProps<ParsableDate>) => void"
      }
    },
    "onInputChange": {
      "defaultValue": null,
      "description": "On input value change handler",
      "name": "onInputChange",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: FormEvent<HTMLInputElement>, props: InputProps) => void"
      }
    },
    "open": {
      "defaultValue": null,
      "description": "Control the open props",
      "name": "open",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "parse": {
      "defaultValue": null,
      "description": "Custom parse function to transform any value into a date",
      "name": "parse",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(date: ParsableDate) => Date"
      }
    },
    "showInputMask": {
      "defaultValue": null,
      "description": "Show input mask",
      "name": "showInputMask",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "timestamp": {
      "defaultValue": null,
      "description": "Timestamp of selected date",
      "name": "timestamp",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "trigger": {
      "defaultValue": null,
      "description": "Set the trigger element for modal type DayPicker",
      "name": "trigger",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<any, string | JSXElementConstructor<any>>"
      }
    },
    "triggerProps": {
      "defaultValue": null,
      "description": "Set trigger props",
      "name": "triggerProps",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ButtonProps"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Set the type of the DayPicker",
      "name": "type",
      "parent": {
        "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
        "name": "StrictDayPickerProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/DayPicker/DayPicker.types.ts",
          "name": "StrictDayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"input\" | \"modal\"",
        "value": [
          {
            "value": "\"input\""
          },
          {
            "value": "\"modal\""
          }
        ]
      }
    },
    "canChangeMonth": {
      "defaultValue": null,
      "description": "",
      "name": "canChangeMonth",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "captionElement": {
      "defaultValue": null,
      "description": "",
      "name": "captionElement",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<Partial<CaptionElementProps>, string | JSXElementConstructor<any>> | ComponentClass<CaptionElementProps, any> | SFC<...>"
      }
    },
    "className": {
      "defaultValue": null,
      "description": "",
      "name": "className",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "classNames": {
      "defaultValue": null,
      "description": "",
      "name": "classNames",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ClassNames"
      }
    },
    "containerProps": {
      "defaultValue": null,
      "description": "",
      "name": "containerProps",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ClassAttributes<HTMLDivElement> & HTMLAttributes<HTMLDivElement>"
      }
    },
    "dir": {
      "defaultValue": null,
      "description": "",
      "name": "dir",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "disabledDays": {
      "defaultValue": null,
      "description": "",
      "name": "disabledDays",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Modifier | Modifier[]"
      }
    },
    "showOutsideDays": {
      "defaultValue": null,
      "description": "",
      "name": "showOutsideDays",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "enableOutsideDaysClick": {
      "defaultValue": null,
      "description": "",
      "name": "enableOutsideDaysClick",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "firstDayOfWeek": {
      "defaultValue": null,
      "description": "",
      "name": "firstDayOfWeek",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "fixedWeeks": {
      "defaultValue": null,
      "description": "",
      "name": "fixedWeeks",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "fromMonth": {
      "defaultValue": null,
      "description": "",
      "name": "fromMonth",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Date"
      }
    },
    "initialMonth": {
      "defaultValue": null,
      "description": "",
      "name": "initialMonth",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Date"
      }
    },
    "labels": {
      "defaultValue": null,
      "description": "",
      "name": "labels",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ previousMonth: string; nextMonth: string; }"
      }
    },
    "locale": {
      "defaultValue": null,
      "description": "",
      "name": "locale",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "localeUtils": {
      "defaultValue": null,
      "description": "",
      "name": "localeUtils",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "{ formatDate(date: Date, format?: string | string[], locale?: string): string; formatDay(day: Date, locale?: string): string; formatMonthTitle(month: Date, locale?: string): string; ... 4 more ...; parseDate(str: string, format?: string, locale?: string): Date; }"
      }
    },
    "modifiers": {
      "defaultValue": null,
      "description": "",
      "name": "modifiers",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Partial<Modifiers>"
      }
    },
    "modifiersStyles": {
      "defaultValue": null,
      "description": "",
      "name": "modifiersStyles",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "object"
      }
    },
    "month": {
      "defaultValue": null,
      "description": "",
      "name": "month",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Date"
      }
    },
    "months": {
      "defaultValue": null,
      "description": "",
      "name": "months",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "navbarElement": {
      "defaultValue": null,
      "description": "",
      "name": "navbarElement",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<Partial<NavbarElementProps>, string | JSXElementConstructor<any>> | ComponentClass<NavbarElementProps, any> | SFC<...>"
      }
    },
    "numberOfMonths": {
      "defaultValue": null,
      "description": "",
      "name": "numberOfMonths",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "",
      "name": "onBlur",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: FocusEvent<HTMLDivElement>) => void"
      }
    },
    "onCaptionClick": {
      "defaultValue": null,
      "description": "",
      "name": "onCaptionClick",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(month: Date, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayClick": {
      "defaultValue": null,
      "description": "",
      "name": "onDayClick",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayKeyDown": {
      "defaultValue": null,
      "description": "",
      "name": "onDayKeyDown",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: KeyboardEvent<HTMLDivElement>) => void"
      }
    },
    "onDayMouseEnter": {
      "defaultValue": null,
      "description": "",
      "name": "onDayMouseEnter",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayMouseLeave": {
      "defaultValue": null,
      "description": "",
      "name": "onDayMouseLeave",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayMouseDown": {
      "defaultValue": null,
      "description": "",
      "name": "onDayMouseDown",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayMouseUp": {
      "defaultValue": null,
      "description": "",
      "name": "onDayMouseUp",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "onDayTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onDayTouchEnd",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: TouchEvent<HTMLDivElement>) => void"
      }
    },
    "onDayTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onDayTouchStart",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: TouchEvent<HTMLDivElement>) => void"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "",
      "name": "onFocus",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: FocusEvent<HTMLDivElement>) => void"
      }
    },
    "onKeyDown": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyDown",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: KeyboardEvent<HTMLDivElement>) => void"
      }
    },
    "onMonthChange": {
      "defaultValue": null,
      "description": "",
      "name": "onMonthChange",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(month: Date) => void"
      }
    },
    "onTodayButtonClick": {
      "defaultValue": null,
      "description": "",
      "name": "onTodayButtonClick",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(day: Date, modifiers: DayModifiers, e: MouseEvent<HTMLButtonElement, MouseEvent>) => void"
      }
    },
    "onWeekClick": {
      "defaultValue": null,
      "description": "",
      "name": "onWeekClick",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(weekNumber: number, days: Date[], e: MouseEvent<HTMLDivElement, MouseEvent>) => void"
      }
    },
    "pagedNavigation": {
      "defaultValue": null,
      "description": "",
      "name": "pagedNavigation",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "renderDay": {
      "defaultValue": null,
      "description": "",
      "name": "renderDay",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(date: Date, modifiers: DayModifiers) => ReactNode"
      }
    },
    "renderWeek": {
      "defaultValue": null,
      "description": "",
      "name": "renderWeek",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(weekNumber: number, week: Date[], month: Date) => ReactNode"
      }
    },
    "reverseMonths": {
      "defaultValue": null,
      "description": "",
      "name": "reverseMonths",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "selectedDays": {
      "defaultValue": null,
      "description": "",
      "name": "selectedDays",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Modifier | Modifier[]"
      }
    },
    "showWeekNumbers": {
      "defaultValue": null,
      "description": "",
      "name": "showWeekNumbers",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "showWeekDays": {
      "defaultValue": null,
      "description": "",
      "name": "showWeekDays",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "todayButton": {
      "defaultValue": null,
      "description": "",
      "name": "todayButton",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "toMonth": {
      "defaultValue": null,
      "description": "",
      "name": "toMonth",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "Date"
      }
    },
    "weekdayElement": {
      "defaultValue": null,
      "description": "",
      "name": "weekdayElement",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactElement<Partial<WeekdayElementProps>, string | JSXElementConstructor<any>> | ComponentClass<WeekdayElementProps, any> | SFC<...>"
      }
    },
    "weekdaysLong": {
      "defaultValue": null,
      "description": "",
      "name": "weekdaysLong",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "weekdaysShort": {
      "defaultValue": null,
      "description": "",
      "name": "weekdaysShort",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string[]"
      }
    },
    "tabIndex": {
      "defaultValue": null,
      "description": "",
      "name": "tabIndex",
      "parent": {
        "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
        "name": "DayPickerProps"
      },
      "declarations": [
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/react-day-picker/types/Props.d.ts",
          "name": "DayPickerProps"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "actions": {
      "defaultValue": null,
      "description": "A Button to Show",
      "name": "actions",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandCollection<ButtonProps>"
      }
    },
    "actionsPosition": {
      "defaultValue": null,
      "description": "Set action button position, default to right",
      "name": "actionsPosition",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"left\" | \"right\"",
        "value": [
          {
            "value": "\"left\""
          },
          {
            "value": "\"right\""
          }
        ]
      }
    },
    "contentClassName": {
      "defaultValue": null,
      "description": "User defined className used for content element",
      "name": "contentClassName",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "contentType": {
      "defaultValue": null,
      "description": "Set field content type",
      "name": "contentType",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"color\" | \"input\" | \"select input\" | \"checkbox\" | \"radio\" | \"switch\"",
        "value": [
          {
            "value": "\"color\""
          },
          {
            "value": "\"input\""
          },
          {
            "value": "\"select input\""
          },
          {
            "value": "\"checkbox\""
          },
          {
            "value": "\"radio\""
          },
          {
            "value": "\"switch\""
          }
        ]
      }
    },
    "hint": {
      "defaultValue": null,
      "description": "An hint, appended after field content",
      "name": "hint",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "hintClassName": {
      "defaultValue": null,
      "description": "User defined className used for hint element",
      "name": "hintClassName",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "An Icon to Show",
      "name": "icon",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AppBucketsIcon<IconProps>"
      }
    },
    "iconPosition": {
      "defaultValue": null,
      "description": "Set the icon position, default to left",
      "name": "iconPosition",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"left\" | \"right\"",
        "value": [
          {
            "value": "\"left\""
          },
          {
            "value": "\"right\""
          }
        ]
      }
    },
    "isDirty": {
      "defaultValue": null,
      "description": "Set field as Dirty",
      "name": "isDirty",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isFocused": {
      "defaultValue": null,
      "description": "Set field as Focused",
      "name": "isFocused",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "isTouched": {
      "defaultValue": null,
      "description": "Set field as Touched",
      "name": "isTouched",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "label": {
      "defaultValue": null,
      "description": "Field Label",
      "name": "label",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "onClear": {
      "defaultValue": null,
      "description": "On Clear Button click",
      "name": "onClear",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: MouseEvent<SVGSVGElement, MouseEvent>) => void"
      }
    },
    "readOnly": {
      "defaultValue": null,
      "description": "Set field as read only",
      "name": "readOnly",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "required": {
      "defaultValue": null,
      "description": "Set the field as Required",
      "name": "required",
      "parent": {
        "fileName": "react-ui/src/Field/Field.types.ts",
        "name": "StrictFieldProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Field/Field.types.ts",
          "name": "StrictFieldProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "appearance": {
      "defaultValue": null,
      "description": "Manually set the Element appearance by Color Pool",
      "name": "appearance",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"amazon\""
          },
          {
            "value": "\"android\""
          },
          {
            "value": "\"apple\""
          },
          {
            "value": "\"facebook\""
          },
          {
            "value": "\"google\""
          },
          {
            "value": "\"google-plus\""
          },
          {
            "value": "\"instagram\""
          },
          {
            "value": "\"linkedin\""
          },
          {
            "value": "\"microsoft\""
          },
          {
            "value": "\"pinterest\""
          },
          {
            "value": "\"skype\""
          },
          {
            "value": "\"slack\""
          },
          {
            "value": "\"telegram\""
          },
          {
            "value": "\"tumblr\""
          },
          {
            "value": "\"twitter\""
          },
          {
            "value": "\"vimeo\""
          },
          {
            "value": "\"whatsapp\""
          },
          {
            "value": "\"yahoo\""
          },
          {
            "value": "\"youtube\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"text\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud dark\""
          },
          {
            "value": "\"dribble\""
          }
        ]
      }
    },
    "danger": {
      "defaultValue": null,
      "description": "Set the Danger State",
      "name": "danger",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "info": {
      "defaultValue": null,
      "description": "Set the Info State",
      "name": "info",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "primary": {
      "defaultValue": null,
      "description": "Set the Primary State",
      "name": "primary",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "secondary": {
      "defaultValue": null,
      "description": "Set the Secondary State",
      "name": "secondary",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "success": {
      "defaultValue": null,
      "description": "Set the Success State",
      "name": "success",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "warning": {
      "defaultValue": null,
      "description": "Set the Warning State",
      "name": "warning",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedComponentStateProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedComponentStateProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "as": {
      "defaultValue": null,
      "description": "An Element used to Render the Component",
      "name": "as",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "string | ComponentClass<{}, any> | FunctionComponent<{}>"
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Main Component Content",
      "name": "children",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreAppBucketsComponentProps"
        },
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/@types/react/index.d.ts",
          "name": "DOMAttributes"
        },
        {
          "fileName": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/node_modules/@types/react/index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "content": {
      "defaultValue": null,
      "description": "Content Shorthand",
      "name": "content",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "backgroundColor": {
      "defaultValue": null,
      "description": "Choose Main background Color",
      "name": "backgroundColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"amazon\""
          },
          {
            "value": "\"android\""
          },
          {
            "value": "\"apple\""
          },
          {
            "value": "\"facebook\""
          },
          {
            "value": "\"google\""
          },
          {
            "value": "\"google-plus\""
          },
          {
            "value": "\"instagram\""
          },
          {
            "value": "\"linkedin\""
          },
          {
            "value": "\"microsoft\""
          },
          {
            "value": "\"pinterest\""
          },
          {
            "value": "\"skype\""
          },
          {
            "value": "\"slack\""
          },
          {
            "value": "\"telegram\""
          },
          {
            "value": "\"tumblr\""
          },
          {
            "value": "\"twitter\""
          },
          {
            "value": "\"vimeo\""
          },
          {
            "value": "\"whatsapp\""
          },
          {
            "value": "\"yahoo\""
          },
          {
            "value": "\"youtube\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"text\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud dark\""
          },
          {
            "value": "\"dribble\""
          }
        ]
      }
    },
    "display": {
      "defaultValue": null,
      "description": "Set element display",
      "name": "display",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ResponsiveProps<ElementDisplay>"
      }
    },
    "fontWeight": {
      "defaultValue": null,
      "description": "Define the main Font Weight",
      "name": "fontWeight",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "FontWeight",
        "value": [
          {
            "value": "\"bold\""
          },
          {
            "value": "\"light\""
          },
          {
            "value": "\"regular\""
          },
          {
            "value": "\"semi bold\""
          }
        ]
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Change component size",
      "name": "size",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "ElementSize",
        "value": [
          {
            "value": "\"extra small\""
          },
          {
            "value": "\"small\""
          },
          {
            "value": "\"normal\""
          },
          {
            "value": "\"large\""
          },
          {
            "value": "\"big\""
          },
          {
            "value": "\"huge\""
          }
        ]
      }
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Define Text Align",
      "name": "textAlign",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "ContentAlign",
        "value": [
          {
            "value": "\"left\""
          },
          {
            "value": "\"right\""
          },
          {
            "value": "\"center\""
          }
        ]
      }
    },
    "textColor": {
      "defaultValue": null,
      "description": "Choose main text color",
      "name": "textColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "SharedAppBucketsComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "SharedAppBucketsComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"amazon\""
          },
          {
            "value": "\"android\""
          },
          {
            "value": "\"apple\""
          },
          {
            "value": "\"facebook\""
          },
          {
            "value": "\"google\""
          },
          {
            "value": "\"google-plus\""
          },
          {
            "value": "\"instagram\""
          },
          {
            "value": "\"linkedin\""
          },
          {
            "value": "\"microsoft\""
          },
          {
            "value": "\"pinterest\""
          },
          {
            "value": "\"skype\""
          },
          {
            "value": "\"slack\""
          },
          {
            "value": "\"telegram\""
          },
          {
            "value": "\"tumblr\""
          },
          {
            "value": "\"twitter\""
          },
          {
            "value": "\"vimeo\""
          },
          {
            "value": "\"whatsapp\""
          },
          {
            "value": "\"yahoo\""
          },
          {
            "value": "\"youtube\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"text\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud dark\""
          },
          {
            "value": "\"dribble\""
          }
        ]
      }
    }
  }
}