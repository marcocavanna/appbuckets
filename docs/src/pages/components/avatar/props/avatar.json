{
  "filename": "packages/react-ui/src/Avatar/Avatar.tsx",
  "tags": {},
  "filePath": "/Users/marcocavanna/Work/AppBuckets/Library/appbuckets/packages/react-ui/src/Avatar/Avatar.tsx",
  "description": "",
  "displayName": "Avatar",
  "props": {
    "backgroundColor": {
      "defaultValue": null,
      "description": "Choose Main background Color",
      "name": "backgroundColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"cloud dark\""
          }
        ]
      }
    },
    "display": {
      "defaultValue": null,
      "description": "Set element display",
      "name": "display",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ResponsiveProps<ElementDisplay>"
      }
    },
    "fontWeight": {
      "defaultValue": null,
      "description": "Define the main Font Weight",
      "name": "fontWeight",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "FontWeight",
        "value": [
          {
            "value": "\"light\""
          },
          {
            "value": "\"regular\""
          },
          {
            "value": "\"semi bold\""
          },
          {
            "value": "\"bold\""
          }
        ]
      }
    },
    "size": {
      "defaultValue": null,
      "description": "Change component size",
      "name": "size",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "ElementSize",
        "value": [
          {
            "value": "\"big\""
          },
          {
            "value": "\"small\""
          },
          {
            "value": "\"extra small\""
          },
          {
            "value": "\"normal\""
          },
          {
            "value": "\"large\""
          },
          {
            "value": "\"huge\""
          }
        ]
      }
    },
    "textAlign": {
      "defaultValue": null,
      "description": "Define Text Align",
      "name": "textAlign",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "ContentAlign",
        "value": [
          {
            "value": "\"left\""
          },
          {
            "value": "\"center\""
          },
          {
            "value": "\"right\""
          }
        ]
      }
    },
    "textColor": {
      "defaultValue": null,
      "description": "Choose main text color",
      "name": "textColor",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "ComponentDisplayProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "ComponentDisplayProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"cloud dark\""
          }
        ]
      }
    },
    "badge": {
      "defaultValue": null,
      "description": "Draw the Notification Badge",
      "name": "badge",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandItem<BadgeProps>"
      }
    },
    "disabled": {
      "defaultValue": null,
      "description": "Set disabled state",
      "name": "disabled",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "flat": {
      "defaultValue": null,
      "description": "Remove Background Color",
      "name": "flat",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "image": {
      "defaultValue": null,
      "description": "Use an image instead content",
      "name": "image",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandItem<DetailedHTMLProps<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>>"
      }
    },
    "icon": {
      "defaultValue": null,
      "description": "Set avatar icon",
      "name": "icon",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "AppBucketsIcon<IconProps>"
      }
    },
    "onClick": {
      "defaultValue": null,
      "description": "On Click Event Handler",
      "name": "onClick",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "(e: MouseEvent<HTMLElement, MouseEvent>, props: AvatarProps) => void"
      }
    },
    "tooltip": {
      "defaultValue": null,
      "description": "Set avatar tooltip",
      "name": "tooltip",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandContent"
      }
    },
    "type": {
      "defaultValue": null,
      "description": "Avatar type",
      "name": "type",
      "parent": {
        "fileName": "react-ui/src/Avatar/Avatar.types.ts",
        "name": "StrictAvatarProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/Avatar/Avatar.types.ts",
          "name": "StrictAvatarProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"flex\" | \"square\" | \"round\"",
        "value": [
          {
            "value": "\"flex\""
          },
          {
            "value": "\"square\""
          },
          {
            "value": "\"round\""
          }
        ]
      }
    },
    "children": {
      "defaultValue": null,
      "description": "Main Component Content",
      "name": "children",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreUIComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreUIComponentProps"
        },
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        },
        {
          "fileName": "index.d.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactNode"
      }
    },
    "content": {
      "defaultValue": null,
      "description": "Content Shorthand",
      "name": "content",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreUIComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreUIComponentProps"
        }
      ],
      "required": false,
      "type": {
        "name": "ShorthandContent"
      }
    },
    "className": {
      "defaultValue": null,
      "description": "User Defined Class Names",
      "name": "className",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "CoreUIVoidComponentProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "CoreUIVoidComponentProps"
        },
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "slot": {
      "defaultValue": null,
      "description": "",
      "name": "slot",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "style": {
      "defaultValue": null,
      "description": "",
      "name": "style",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CSSProperties"
      }
    },
    "title": {
      "defaultValue": null,
      "description": "",
      "name": "title",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "ref": {
      "defaultValue": null,
      "description": "",
      "name": "ref",
      "parent": {
        "fileName": "index.d.ts",
        "name": "ClassAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "ClassAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "LegacyRef<HTMLDivElement>"
      }
    },
    "key": {
      "defaultValue": null,
      "description": "",
      "name": "key",
      "parent": {
        "fileName": "index.d.ts",
        "name": "Attributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "Attributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Key"
      }
    },
    "defaultChecked": {
      "defaultValue": null,
      "description": "",
      "name": "defaultChecked",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "defaultValue": {
      "defaultValue": null,
      "description": "",
      "name": "defaultValue",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string | number | readonly string[]"
      }
    },
    "suppressContentEditableWarning": {
      "defaultValue": null,
      "description": "",
      "name": "suppressContentEditableWarning",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "suppressHydrationWarning": {
      "defaultValue": null,
      "description": "",
      "name": "suppressHydrationWarning",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "accessKey": {
      "defaultValue": null,
      "description": "",
      "name": "accessKey",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "contentEditable": {
      "defaultValue": null,
      "description": "",
      "name": "contentEditable",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish | \"inherit\""
      }
    },
    "contextMenu": {
      "defaultValue": null,
      "description": "",
      "name": "contextMenu",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "dir": {
      "defaultValue": null,
      "description": "",
      "name": "dir",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "draggable": {
      "defaultValue": null,
      "description": "",
      "name": "draggable",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "hidden": {
      "defaultValue": null,
      "description": "",
      "name": "hidden",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "id": {
      "defaultValue": null,
      "description": "",
      "name": "id",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "lang": {
      "defaultValue": null,
      "description": "",
      "name": "lang",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "placeholder": {
      "defaultValue": null,
      "description": "",
      "name": "placeholder",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "spellCheck": {
      "defaultValue": null,
      "description": "",
      "name": "spellCheck",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "tabIndex": {
      "defaultValue": null,
      "description": "",
      "name": "tabIndex",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "translate": {
      "defaultValue": null,
      "description": "",
      "name": "translate",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"yes\" | \"no\"",
        "value": [
          {
            "value": "\"yes\""
          },
          {
            "value": "\"no\""
          }
        ]
      }
    },
    "radioGroup": {
      "defaultValue": null,
      "description": "",
      "name": "radioGroup",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "role": {
      "defaultValue": null,
      "description": "",
      "name": "role",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AriaRole"
      }
    },
    "about": {
      "defaultValue": null,
      "description": "",
      "name": "about",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "datatype": {
      "defaultValue": null,
      "description": "",
      "name": "datatype",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "inlist": {
      "defaultValue": null,
      "description": "",
      "name": "inlist",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "any"
      }
    },
    "prefix": {
      "defaultValue": null,
      "description": "",
      "name": "prefix",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "property": {
      "defaultValue": null,
      "description": "",
      "name": "property",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "resource": {
      "defaultValue": null,
      "description": "",
      "name": "resource",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "typeof": {
      "defaultValue": null,
      "description": "",
      "name": "typeof",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "vocab": {
      "defaultValue": null,
      "description": "",
      "name": "vocab",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoCapitalize": {
      "defaultValue": null,
      "description": "",
      "name": "autoCapitalize",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoCorrect": {
      "defaultValue": null,
      "description": "",
      "name": "autoCorrect",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "autoSave": {
      "defaultValue": null,
      "description": "",
      "name": "autoSave",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "color": {
      "defaultValue": null,
      "description": "",
      "name": "color",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "itemProp": {
      "defaultValue": null,
      "description": "",
      "name": "itemProp",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "itemScope": {
      "defaultValue": null,
      "description": "",
      "name": "itemScope",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "itemType": {
      "defaultValue": null,
      "description": "",
      "name": "itemType",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "itemID": {
      "defaultValue": null,
      "description": "",
      "name": "itemID",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "itemRef": {
      "defaultValue": null,
      "description": "",
      "name": "itemRef",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "results": {
      "defaultValue": null,
      "description": "",
      "name": "results",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "security": {
      "defaultValue": null,
      "description": "",
      "name": "security",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "unselectable": {
      "defaultValue": null,
      "description": "",
      "name": "unselectable",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"on\" | \"off\"",
        "value": [
          {
            "value": "\"on\""
          },
          {
            "value": "\"off\""
          }
        ]
      }
    },
    "inputMode": {
      "defaultValue": null,
      "description": "Hints at the type of data that might be entered by the user while editing the element or its contents\n@see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute",
      "name": "inputMode",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"text\" | \"none\" | \"search\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\"",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"none\""
          },
          {
            "value": "\"search\""
          },
          {
            "value": "\"tel\""
          },
          {
            "value": "\"url\""
          },
          {
            "value": "\"email\""
          },
          {
            "value": "\"numeric\""
          },
          {
            "value": "\"decimal\""
          }
        ]
      }
    },
    "is": {
      "defaultValue": null,
      "description": "Specify that a standard HTML element should behave like a defined custom built-in element\n@see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is",
      "name": "is",
      "parent": {
        "fileName": "index.d.ts",
        "name": "HTMLAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "HTMLAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-activedescendant": {
      "defaultValue": null,
      "description": "Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application.",
      "name": "aria-activedescendant",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-atomic": {
      "defaultValue": null,
      "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
      "name": "aria-atomic",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-autocomplete": {
      "defaultValue": null,
      "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\npresented if they are made.",
      "name": "aria-autocomplete",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"inline\" | \"none\" | \"list\" | \"both\"",
        "value": [
          {
            "value": "\"inline\""
          },
          {
            "value": "\"none\""
          },
          {
            "value": "\"list\""
          },
          {
            "value": "\"both\""
          }
        ]
      }
    },
    "aria-busy": {
      "defaultValue": null,
      "description": "Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user.",
      "name": "aria-busy",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-checked": {
      "defaultValue": null,
      "description": "Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n@see aria-pressed\n@see aria-selected.",
      "name": "aria-checked",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | \"true\" | \"false\" | \"mixed\""
      }
    },
    "aria-colcount": {
      "defaultValue": null,
      "description": "Defines the total number of columns in a table, grid, or treegrid.\n@see aria-colindex.",
      "name": "aria-colcount",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-colindex": {
      "defaultValue": null,
      "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n@see aria-colcount\n@see aria-colspan.",
      "name": "aria-colindex",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-colspan": {
      "defaultValue": null,
      "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-colindex\n@see aria-rowspan.",
      "name": "aria-colspan",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-controls": {
      "defaultValue": null,
      "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element.\n@see aria-owns.",
      "name": "aria-controls",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-current": {
      "defaultValue": null,
      "description": "Indicates the element that represents the current item within a container or set of related elements.",
      "name": "aria-current",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | \"time\" | \"location\" | \"true\" | \"false\" | \"page\" | \"step\" | \"date\""
      }
    },
    "aria-describedby": {
      "defaultValue": null,
      "description": "Identifies the element (or elements) that describes the object.\n@see aria-labelledby",
      "name": "aria-describedby",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-details": {
      "defaultValue": null,
      "description": "Identifies the element that provides a detailed, extended description for the object.\n@see aria-describedby.",
      "name": "aria-details",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-disabled": {
      "defaultValue": null,
      "description": "Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n@see aria-hidden\n@see aria-readonly.",
      "name": "aria-disabled",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-dropeffect": {
      "defaultValue": null,
      "description": "Indicates what functions can be performed when a dragged object is released on the drop target.\n@deprecated in ARIA 1.1",
      "name": "aria-dropeffect",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"link\" | \"none\" | \"copy\" | \"execute\" | \"move\" | \"popup\"",
        "value": [
          {
            "value": "\"link\""
          },
          {
            "value": "\"none\""
          },
          {
            "value": "\"copy\""
          },
          {
            "value": "\"execute\""
          },
          {
            "value": "\"move\""
          },
          {
            "value": "\"popup\""
          }
        ]
      }
    },
    "aria-errormessage": {
      "defaultValue": null,
      "description": "Identifies the element that provides an error message for the object.\n@see aria-invalid\n@see aria-describedby.",
      "name": "aria-errormessage",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-expanded": {
      "defaultValue": null,
      "description": "Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.",
      "name": "aria-expanded",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-flowto": {
      "defaultValue": null,
      "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\nallows assistive technology to override the general default of reading in document source order.",
      "name": "aria-flowto",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-grabbed": {
      "defaultValue": null,
      "description": "Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n@deprecated in ARIA 1.1",
      "name": "aria-grabbed",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-haspopup": {
      "defaultValue": null,
      "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
      "name": "aria-haspopup",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | \"dialog\" | \"menu\" | \"grid\" | \"tree\" | \"true\" | \"false\" | \"listbox\""
      }
    },
    "aria-hidden": {
      "defaultValue": null,
      "description": "Indicates whether the element is exposed to an accessibility API.\n@see aria-disabled.",
      "name": "aria-hidden",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-invalid": {
      "defaultValue": null,
      "description": "Indicates the entered value does not conform to the format expected by the application.\n@see aria-errormessage.",
      "name": "aria-invalid",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | \"true\" | \"false\" | \"grammar\" | \"spelling\""
      }
    },
    "aria-keyshortcuts": {
      "defaultValue": null,
      "description": "Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.",
      "name": "aria-keyshortcuts",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-label": {
      "defaultValue": null,
      "description": "Defines a string value that labels the current element.\n@see aria-labelledby.",
      "name": "aria-label",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-labelledby": {
      "defaultValue": null,
      "description": "Identifies the element (or elements) that labels the current element.\n@see aria-describedby.",
      "name": "aria-labelledby",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-level": {
      "defaultValue": null,
      "description": "Defines the hierarchical level of an element within a structure.",
      "name": "aria-level",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-live": {
      "defaultValue": null,
      "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
      "name": "aria-live",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"off\" | \"assertive\" | \"polite\"",
        "value": [
          {
            "value": "\"off\""
          },
          {
            "value": "\"assertive\""
          },
          {
            "value": "\"polite\""
          }
        ]
      }
    },
    "aria-modal": {
      "defaultValue": null,
      "description": "Indicates whether an element is modal when displayed.",
      "name": "aria-modal",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-multiline": {
      "defaultValue": null,
      "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
      "name": "aria-multiline",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-multiselectable": {
      "defaultValue": null,
      "description": "Indicates that the user may select more than one item from the current selectable descendants.",
      "name": "aria-multiselectable",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-orientation": {
      "defaultValue": null,
      "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
      "name": "aria-orientation",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"horizontal\" | \"vertical\"",
        "value": [
          {
            "value": "\"horizontal\""
          },
          {
            "value": "\"vertical\""
          }
        ]
      }
    },
    "aria-owns": {
      "defaultValue": null,
      "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\nbetween DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n@see aria-controls.",
      "name": "aria-owns",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-placeholder": {
      "defaultValue": null,
      "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\nA hint could be a sample value or a brief description of the expected format.",
      "name": "aria-placeholder",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-posinset": {
      "defaultValue": null,
      "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-setsize.",
      "name": "aria-posinset",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-pressed": {
      "defaultValue": null,
      "description": "Indicates the current \"pressed\" state of toggle buttons.\n@see aria-checked\n@see aria-selected.",
      "name": "aria-pressed",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean | \"true\" | \"false\" | \"mixed\""
      }
    },
    "aria-readonly": {
      "defaultValue": null,
      "description": "Indicates that the element is not editable, but is otherwise operable.\n@see aria-disabled.",
      "name": "aria-readonly",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-relevant": {
      "defaultValue": null,
      "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n@see aria-atomic.",
      "name": "aria-relevant",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"text\" | \"additions\" | \"additions removals\" | \"additions text\" | \"all\" | \"removals\" | \"removals additions\" | \"removals text\" | \"text additions\" | \"text removals\"",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"additions\""
          },
          {
            "value": "\"additions removals\""
          },
          {
            "value": "\"additions text\""
          },
          {
            "value": "\"all\""
          },
          {
            "value": "\"removals\""
          },
          {
            "value": "\"removals additions\""
          },
          {
            "value": "\"removals text\""
          },
          {
            "value": "\"text additions\""
          },
          {
            "value": "\"text removals\""
          }
        ]
      }
    },
    "aria-required": {
      "defaultValue": null,
      "description": "Indicates that user input is required on the element before a form may be submitted.",
      "name": "aria-required",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-roledescription": {
      "defaultValue": null,
      "description": "Defines a human-readable, author-localized description for the role of an element.",
      "name": "aria-roledescription",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "aria-rowcount": {
      "defaultValue": null,
      "description": "Defines the total number of rows in a table, grid, or treegrid.\n@see aria-rowindex.",
      "name": "aria-rowcount",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-rowindex": {
      "defaultValue": null,
      "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n@see aria-rowcount\n@see aria-rowspan.",
      "name": "aria-rowindex",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-rowspan": {
      "defaultValue": null,
      "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n@see aria-rowindex\n@see aria-colspan.",
      "name": "aria-rowspan",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-selected": {
      "defaultValue": null,
      "description": "Indicates the current \"selected\" state of various widgets.\n@see aria-checked\n@see aria-pressed.",
      "name": "aria-selected",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "Booleanish"
      }
    },
    "aria-setsize": {
      "defaultValue": null,
      "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n@see aria-posinset.",
      "name": "aria-setsize",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-sort": {
      "defaultValue": null,
      "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
      "name": "aria-sort",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "\"none\" | \"ascending\" | \"descending\" | \"other\"",
        "value": [
          {
            "value": "\"none\""
          },
          {
            "value": "\"ascending\""
          },
          {
            "value": "\"descending\""
          },
          {
            "value": "\"other\""
          }
        ]
      }
    },
    "aria-valuemax": {
      "defaultValue": null,
      "description": "Defines the maximum allowed value for a range widget.",
      "name": "aria-valuemax",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-valuemin": {
      "defaultValue": null,
      "description": "Defines the minimum allowed value for a range widget.",
      "name": "aria-valuemin",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-valuenow": {
      "defaultValue": null,
      "description": "Defines the current value for a range widget.\n@see aria-valuetext.",
      "name": "aria-valuenow",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "number"
      }
    },
    "aria-valuetext": {
      "defaultValue": null,
      "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
      "name": "aria-valuetext",
      "parent": {
        "fileName": "index.d.ts",
        "name": "AriaAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "AriaAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "string"
      }
    },
    "dangerouslySetInnerHTML": {
      "defaultValue": null,
      "description": "",
      "name": "dangerouslySetInnerHTML",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "{ __html: string; }"
      }
    },
    "onCopy": {
      "defaultValue": null,
      "description": "",
      "name": "onCopy",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onCopyCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCopyCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onCut": {
      "defaultValue": null,
      "description": "",
      "name": "onCut",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onCutCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCutCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onPaste": {
      "defaultValue": null,
      "description": "",
      "name": "onPaste",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onPasteCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPasteCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ClipboardEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionEnd",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionEndCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionStart": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionStart",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionStartCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionStartCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionUpdate": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionUpdate",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onCompositionUpdateCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCompositionUpdateCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "CompositionEventHandler<HTMLDivElement>"
      }
    },
    "onFocus": {
      "defaultValue": null,
      "description": "",
      "name": "onFocus",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FocusEventHandler<HTMLDivElement>"
      }
    },
    "onFocusCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onFocusCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FocusEventHandler<HTMLDivElement>"
      }
    },
    "onBlur": {
      "defaultValue": null,
      "description": "",
      "name": "onBlur",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FocusEventHandler<HTMLDivElement>"
      }
    },
    "onBlurCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onBlurCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FocusEventHandler<HTMLDivElement>"
      }
    },
    "onChange": {
      "defaultValue": null,
      "description": "",
      "name": "onChange",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onChangeCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onChangeCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onBeforeInput": {
      "defaultValue": null,
      "description": "",
      "name": "onBeforeInput",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onBeforeInputCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onBeforeInputCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onInput": {
      "defaultValue": null,
      "description": "",
      "name": "onInput",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onInputCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onInputCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onReset": {
      "defaultValue": null,
      "description": "",
      "name": "onReset",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onResetCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onResetCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onSubmit": {
      "defaultValue": null,
      "description": "",
      "name": "onSubmit",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onSubmitCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onSubmitCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onInvalid": {
      "defaultValue": null,
      "description": "",
      "name": "onInvalid",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onInvalidCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onInvalidCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "FormEventHandler<HTMLDivElement>"
      }
    },
    "onLoad": {
      "defaultValue": null,
      "description": "",
      "name": "onLoad",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onError": {
      "defaultValue": null,
      "description": "",
      "name": "onError",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onErrorCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onErrorCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onKeyDown": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyDown",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onKeyDownCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyDownCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onKeyPress": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyPress",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onKeyPressCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyPressCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onKeyUp": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyUp",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onKeyUpCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onKeyUpCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "KeyboardEventHandler<HTMLDivElement>"
      }
    },
    "onAbort": {
      "defaultValue": null,
      "description": "",
      "name": "onAbort",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onAbortCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onAbortCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onCanPlay": {
      "defaultValue": null,
      "description": "",
      "name": "onCanPlay",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onCanPlayCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCanPlayCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onCanPlayThrough": {
      "defaultValue": null,
      "description": "",
      "name": "onCanPlayThrough",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onCanPlayThroughCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onCanPlayThroughCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onDurationChange": {
      "defaultValue": null,
      "description": "",
      "name": "onDurationChange",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onDurationChangeCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDurationChangeCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEmptied": {
      "defaultValue": null,
      "description": "",
      "name": "onEmptied",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEmptiedCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onEmptiedCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEncrypted": {
      "defaultValue": null,
      "description": "",
      "name": "onEncrypted",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEncryptedCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onEncryptedCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEnded": {
      "defaultValue": null,
      "description": "",
      "name": "onEnded",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onEndedCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onEndedCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadedData": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadedData",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadedDataCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadedDataCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadedMetadata": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadedMetadata",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadedMetadataCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadedMetadataCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadStart": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadStart",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onLoadStartCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLoadStartCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPause": {
      "defaultValue": null,
      "description": "",
      "name": "onPause",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPauseCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPauseCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPlay": {
      "defaultValue": null,
      "description": "",
      "name": "onPlay",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPlayCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPlayCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPlaying": {
      "defaultValue": null,
      "description": "",
      "name": "onPlaying",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onPlayingCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPlayingCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onProgress": {
      "defaultValue": null,
      "description": "",
      "name": "onProgress",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onProgressCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onProgressCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onRateChange": {
      "defaultValue": null,
      "description": "",
      "name": "onRateChange",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onRateChangeCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onRateChangeCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSeeked": {
      "defaultValue": null,
      "description": "",
      "name": "onSeeked",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSeekedCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onSeekedCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSeeking": {
      "defaultValue": null,
      "description": "",
      "name": "onSeeking",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSeekingCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onSeekingCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onStalled": {
      "defaultValue": null,
      "description": "",
      "name": "onStalled",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onStalledCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onStalledCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSuspend": {
      "defaultValue": null,
      "description": "",
      "name": "onSuspend",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSuspendCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onSuspendCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onTimeUpdate": {
      "defaultValue": null,
      "description": "",
      "name": "onTimeUpdate",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onTimeUpdateCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTimeUpdateCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onVolumeChange": {
      "defaultValue": null,
      "description": "",
      "name": "onVolumeChange",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onVolumeChangeCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onVolumeChangeCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onWaiting": {
      "defaultValue": null,
      "description": "",
      "name": "onWaiting",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onWaitingCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onWaitingCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onAuxClick": {
      "defaultValue": null,
      "description": "",
      "name": "onAuxClick",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onAuxClickCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onAuxClickCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onClickCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onClickCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onContextMenu": {
      "defaultValue": null,
      "description": "",
      "name": "onContextMenu",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onContextMenuCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onContextMenuCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onDoubleClick": {
      "defaultValue": null,
      "description": "",
      "name": "onDoubleClick",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onDoubleClickCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDoubleClickCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onDrag": {
      "defaultValue": null,
      "description": "",
      "name": "onDrag",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onDragEnd",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragEndCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragEnter": {
      "defaultValue": null,
      "description": "",
      "name": "onDragEnter",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragEnterCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragEnterCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragExit": {
      "defaultValue": null,
      "description": "",
      "name": "onDragExit",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragExitCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragExitCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragLeave": {
      "defaultValue": null,
      "description": "",
      "name": "onDragLeave",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragLeaveCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragLeaveCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragOver": {
      "defaultValue": null,
      "description": "",
      "name": "onDragOver",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragOverCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragOverCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragStart": {
      "defaultValue": null,
      "description": "",
      "name": "onDragStart",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDragStartCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDragStartCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDrop": {
      "defaultValue": null,
      "description": "",
      "name": "onDrop",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onDropCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onDropCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "DragEventHandler<HTMLDivElement>"
      }
    },
    "onMouseDown": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseDown",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseDownCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseDownCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseEnter": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseEnter",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseLeave": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseLeave",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseMove": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseMove",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseMoveCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseMoveCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseOut": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseOut",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseOutCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseOutCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseOver": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseOver",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseOverCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseOverCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseUp": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseUp",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onMouseUpCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onMouseUpCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "MouseEventHandler<HTMLDivElement>"
      }
    },
    "onSelect": {
      "defaultValue": null,
      "description": "",
      "name": "onSelect",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onSelectCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onSelectCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "ReactEventHandler<HTMLDivElement>"
      }
    },
    "onTouchCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancel",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchCancelCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchCancelCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEnd",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchEndCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchMove": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMove",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchMoveCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchMoveCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchStart": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStart",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onTouchStartCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTouchStartCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TouchEventHandler<HTMLDivElement>"
      }
    },
    "onPointerDown": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerDown",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerDownCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerDownCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerMove": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerMove",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerMoveCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerMoveCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerUp": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerUp",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerUpCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerUpCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerCancel": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerCancel",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerCancelCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerCancelCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerEnter": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerEnter",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerEnterCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerEnterCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerLeave": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerLeave",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerLeaveCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerLeaveCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerOver": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerOver",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerOverCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerOverCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerOut": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerOut",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onPointerOutCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onPointerOutCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onGotPointerCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onGotPointerCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onGotPointerCaptureCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onGotPointerCaptureCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onLostPointerCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLostPointerCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onLostPointerCaptureCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onLostPointerCaptureCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "PointerEventHandler<HTMLDivElement>"
      }
    },
    "onScroll": {
      "defaultValue": null,
      "description": "",
      "name": "onScroll",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "UIEventHandler<HTMLDivElement>"
      }
    },
    "onScrollCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onScrollCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "UIEventHandler<HTMLDivElement>"
      }
    },
    "onWheel": {
      "defaultValue": null,
      "description": "",
      "name": "onWheel",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "WheelEventHandler<HTMLDivElement>"
      }
    },
    "onWheelCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onWheelCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "WheelEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationStart": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationStart",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationStartCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationStartCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationEnd",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationEndCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationIteration": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationIteration",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onAnimationIterationCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onAnimationIterationCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "AnimationEventHandler<HTMLDivElement>"
      }
    },
    "onTransitionEnd": {
      "defaultValue": null,
      "description": "",
      "name": "onTransitionEnd",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TransitionEventHandler<HTMLDivElement>"
      }
    },
    "onTransitionEndCapture": {
      "defaultValue": null,
      "description": "",
      "name": "onTransitionEndCapture",
      "parent": {
        "fileName": "index.d.ts",
        "name": "DOMAttributes"
      },
      "declarations": [
        {
          "fileName": "index.d.ts",
          "name": "DOMAttributes"
        }
      ],
      "required": false,
      "type": {
        "name": "TransitionEventHandler<HTMLDivElement>"
      }
    },
    "as": {
      "defaultValue": null,
      "description": "",
      "name": "as",
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "TypeLiteral"
        }
      ],
      "required": false,
      "type": {
        "name": "ElementType<any>"
      }
    },
    "appearance": {
      "defaultValue": null,
      "description": "Manually set the Element appearance by Color Pool",
      "name": "appearance",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "enum",
        "raw": "AppBucketsColor",
        "value": [
          {
            "value": "\"text\""
          },
          {
            "value": "\"danger\""
          },
          {
            "value": "\"info\""
          },
          {
            "value": "\"primary\""
          },
          {
            "value": "\"success\""
          },
          {
            "value": "\"warning\""
          },
          {
            "value": "\"text secondary\""
          },
          {
            "value": "\"black\""
          },
          {
            "value": "\"white\""
          },
          {
            "value": "\"white shade\""
          },
          {
            "value": "\"blue\""
          },
          {
            "value": "\"teal\""
          },
          {
            "value": "\"green\""
          },
          {
            "value": "\"yellow\""
          },
          {
            "value": "\"orange\""
          },
          {
            "value": "\"red\""
          },
          {
            "value": "\"pink\""
          },
          {
            "value": "\"purple\""
          },
          {
            "value": "\"cloud light\""
          },
          {
            "value": "\"cloud\""
          },
          {
            "value": "\"cloud dark\""
          }
        ]
      }
    },
    "danger": {
      "defaultValue": null,
      "description": "Set the Danger State",
      "name": "danger",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "info": {
      "defaultValue": null,
      "description": "Set the Info State",
      "name": "info",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "primary": {
      "defaultValue": null,
      "description": "Set the Primary State",
      "name": "primary",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "secondary": {
      "defaultValue": null,
      "description": "Set the Secondary State",
      "name": "secondary",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "success": {
      "defaultValue": null,
      "description": "Set the Success State",
      "name": "success",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    },
    "warning": {
      "defaultValue": null,
      "description": "Set the Warning State",
      "name": "warning",
      "parent": {
        "fileName": "react-ui/src/generic.ts",
        "name": "AppearanceProps"
      },
      "declarations": [
        {
          "fileName": "react-ui/src/generic.ts",
          "name": "AppearanceProps"
        }
      ],
      "required": false,
      "type": {
        "name": "boolean"
      }
    }
  }
}