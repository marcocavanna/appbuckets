import * as React from 'react';

import {
  FieldMetaProps,
  FieldValidator,
  FormikContextType
} from 'formik';

import {
  AnyObject,
  SharedComponentStateProps
} from '../../generic';


/* --------
 * Formik Field Wrapper HOC Configuration Object
 * -------- */
export interface WithFormikFieldConfiguration<P extends WrappedComponentInnerProps, ValueType, DisplayedValue = ValueType> {
  /** The Component to Render */
  Component: React.ComponentType<FormikFieldComponentRenderProps<P, ValueType, DisplayedValue>>;

  /** Manual Override the displayed value */
  computeValue?: FormikFieldValueComputing<P, ValueType, DisplayedValue>;

  /** Set component default props */
  defaultProps?: Partial<P>;

  /** Set the field display name */
  displayName?: string;

  /** Override default onChange field handler */
  onChange?: FormikFieldChangeHandler<P, ValueType>;

  /** Override component props */
  overrideProps?: Partial<P>;

  /** Choose if meta touched props must be set to true on change, default `true` */
  setTouchedOnChange?: boolean;
}


/* --------
 * The augmented Props used to render the Formik Wrapped
 * fields after applying the HOC Function
 * -------- */
export type FormikFieldComponent<P> = React.FunctionComponent<FormikFieldComponentProps<P>>;

export type FormikFieldComponentProps<P> = P & {
  /** The field name is required to let formik work */
  name: string;

  /** Get the error message only once form has been submitted at least once, default to `true` */
  getErrorOnSubmitted?: boolean;

  /** Get the error message once field has been touched, default to `false` */
  getErrorOnTouched?: boolean;

  /** Override the default setTouchedOnChange behaviour */
  setTouchedOnChange?: boolean;

  /** Field Validator Function */
  validate?: FieldValidator;
};


/* --------
 * A User Defined Function used to compute
 * the value key passed to component render
 * this will be used to separate the form value
 * to the displayed value.
 * Eg. while using the Time Input, the form value
 * must remain a timestamp number, but the input
 * must display the formatted choose time
 * -------- */
export type FormikFieldValueComputing<P, ReceivedValue, ReturnedValue> = (
  /** Current Form Value */
  value: ReceivedValue,
  /** Component Props */
  props: {
    /** Field Name */
    name: string;
  } & P
) => ReturnedValue;


/* --------
 * A User Defined Function that will overwrite the default
 * onChange handler defined in withFormikField HOC Function
 * this will be used to compute the value set in formik field
 * -------- */
export type FormikFieldChangeHandler<P, ValueType> = (
  /** The formik bag */
  formik: FormikContextType<any>,
  /** The original FormEvent generated */
  event: React.FormEvent<HTMLElement>,
  /** Component Props */
  props: {
    /** Field name */
    name: string;
  } & P,
  /** Field Meta Props */
  meta: FieldMetaProps<ValueType>
) => void;


/* --------
 * Wrapped Component Required Props
 * this props will be available inside
 * the withFormikField HOC function
 * and are used only has internal props
 * -------- */
export type WrappedComponentInnerProps = AnyObject & {
  /** Local onBlur event handler */
  onBlur?: (...args: any[]) => void;

  /** Local onChange event handler */
  onChange?: (...args: any[]) => void;

  /** The field name */
  name?: string;

  /** The field validator function */
  validator?: FieldValidator
};


/* --------
 * Wrapped Component Props
 * this props will be passed down to render
 * function declared in withFormikField
 * configuration object and will be available
 * inside component render
 * -------- */
export type FormikFieldComponentRenderProps<P, ValueType, DisplayedValue = ValueType> = {
  /** Meta props generated by Formik context */
  meta: FieldMetaProps<ValueType>;

  /** All default component props passed while rendering */
  rest: {
    /** On Blur Handler */
    onBlur: (...args: any[]) => void;
    /** On Change Handler */
    onChange: (...args: any[]) => void;
    /** The field name */
    name: string;
    /** The field value */
    value: DisplayedValue
  } & P,

  /** The field state at render time */
  state: FieldState;
};


/* --------
 * Computed Field State generated by the withFormikField
 * HOC Component Function
 * -------- */
type FieldState = SharedComponentStateProps & {
  /** Get if form is currently submitting */
  isSubmitting: boolean;

  /** Validation Message */
  message: string | undefined;
};
